// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: proto/simulation.proto

package simulation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SimulationService_GetInfo_FullMethodName           = "/simulation.SimulationService/GetInfo"
	SimulationService_CreateEnvironment_FullMethodName = "/simulation.SimulationService/CreateEnvironment"
	SimulationService_ResetEnvironment_FullMethodName  = "/simulation.SimulationService/ResetEnvironment"
	SimulationService_StepEnvironment_FullMethodName   = "/simulation.SimulationService/StepEnvironment"
	SimulationService_CloseEnvironment_FullMethodName  = "/simulation.SimulationService/CloseEnvironment"
	SimulationService_StreamStep_FullMethodName        = "/simulation.SimulationService/StreamStep"
)

// SimulationServiceClient is the client API for SimulationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimulationServiceClient interface {
	// GetInfo 获取服务信息
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// CreateEnvironment 创建环境
	CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*CreateEnvironmentResponse, error)
	// ResetEnvironment 重置环境
	ResetEnvironment(ctx context.Context, in *ResetEnvironmentRequest, opts ...grpc.CallOption) (*ResetEnvironmentResponse, error)
	// StepEnvironment 执行一步仿真
	StepEnvironment(ctx context.Context, in *StepEnvironmentRequest, opts ...grpc.CallOption) (*StepEnvironmentResponse, error)
	// CloseEnvironment 关闭环境
	CloseEnvironment(ctx context.Context, in *CloseEnvironmentRequest, opts ...grpc.CallOption) (*CloseEnvironmentResponse, error)
	// StreamStep 流式执行仿真步骤 (可选，用于实时仿真)
	StreamStep(ctx context.Context, opts ...grpc.CallOption) (SimulationService_StreamStepClient, error)
}

type simulationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimulationServiceClient(cc grpc.ClientConnInterface) SimulationServiceClient {
	return &simulationServiceClient{cc}
}

func (c *simulationServiceClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, SimulationService_GetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*CreateEnvironmentResponse, error) {
	out := new(CreateEnvironmentResponse)
	err := c.cc.Invoke(ctx, SimulationService_CreateEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) ResetEnvironment(ctx context.Context, in *ResetEnvironmentRequest, opts ...grpc.CallOption) (*ResetEnvironmentResponse, error) {
	out := new(ResetEnvironmentResponse)
	err := c.cc.Invoke(ctx, SimulationService_ResetEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) StepEnvironment(ctx context.Context, in *StepEnvironmentRequest, opts ...grpc.CallOption) (*StepEnvironmentResponse, error) {
	out := new(StepEnvironmentResponse)
	err := c.cc.Invoke(ctx, SimulationService_StepEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) CloseEnvironment(ctx context.Context, in *CloseEnvironmentRequest, opts ...grpc.CallOption) (*CloseEnvironmentResponse, error) {
	out := new(CloseEnvironmentResponse)
	err := c.cc.Invoke(ctx, SimulationService_CloseEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) StreamStep(ctx context.Context, opts ...grpc.CallOption) (SimulationService_StreamStepClient, error) {
	stream, err := c.cc.NewStream(ctx, &SimulationService_ServiceDesc.Streams[0], SimulationService_StreamStep_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &simulationServiceStreamStepClient{stream}
	return x, nil
}

type SimulationService_StreamStepClient interface {
	Send(*StepEnvironmentRequest) error
	Recv() (*StepEnvironmentResponse, error)
	grpc.ClientStream
}

type simulationServiceStreamStepClient struct {
	grpc.ClientStream
}

func (x *simulationServiceStreamStepClient) Send(m *StepEnvironmentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simulationServiceStreamStepClient) Recv() (*StepEnvironmentResponse, error) {
	m := new(StepEnvironmentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimulationServiceServer is the server API for SimulationService service.
// All implementations must embed UnimplementedSimulationServiceServer
// for forward compatibility
type SimulationServiceServer interface {
	// GetInfo 获取服务信息
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// CreateEnvironment 创建环境
	CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*CreateEnvironmentResponse, error)
	// ResetEnvironment 重置环境
	ResetEnvironment(context.Context, *ResetEnvironmentRequest) (*ResetEnvironmentResponse, error)
	// StepEnvironment 执行一步仿真
	StepEnvironment(context.Context, *StepEnvironmentRequest) (*StepEnvironmentResponse, error)
	// CloseEnvironment 关闭环境
	CloseEnvironment(context.Context, *CloseEnvironmentRequest) (*CloseEnvironmentResponse, error)
	// StreamStep 流式执行仿真步骤 (可选，用于实时仿真)
	StreamStep(SimulationService_StreamStepServer) error
	mustEmbedUnimplementedSimulationServiceServer()
}

// UnimplementedSimulationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSimulationServiceServer struct {
}

func (UnimplementedSimulationServiceServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedSimulationServiceServer) CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*CreateEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (UnimplementedSimulationServiceServer) ResetEnvironment(context.Context, *ResetEnvironmentRequest) (*ResetEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetEnvironment not implemented")
}
func (UnimplementedSimulationServiceServer) StepEnvironment(context.Context, *StepEnvironmentRequest) (*StepEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StepEnvironment not implemented")
}
func (UnimplementedSimulationServiceServer) CloseEnvironment(context.Context, *CloseEnvironmentRequest) (*CloseEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseEnvironment not implemented")
}
func (UnimplementedSimulationServiceServer) StreamStep(SimulationService_StreamStepServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStep not implemented")
}
func (UnimplementedSimulationServiceServer) mustEmbedUnimplementedSimulationServiceServer() {}

// UnsafeSimulationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimulationServiceServer will
// result in compilation errors.
type UnsafeSimulationServiceServer interface {
	mustEmbedUnimplementedSimulationServiceServer()
}

func RegisterSimulationServiceServer(s grpc.ServiceRegistrar, srv SimulationServiceServer) {
	s.RegisterService(&SimulationService_ServiceDesc, srv)
}

func _SimulationService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimulationService_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimulationService_CreateEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).CreateEnvironment(ctx, req.(*CreateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_ResetEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).ResetEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimulationService_ResetEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).ResetEnvironment(ctx, req.(*ResetEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_StepEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).StepEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimulationService_StepEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).StepEnvironment(ctx, req.(*StepEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_CloseEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).CloseEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimulationService_CloseEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).CloseEnvironment(ctx, req.(*CloseEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_StreamStep_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimulationServiceServer).StreamStep(&simulationServiceStreamStepServer{stream})
}

type SimulationService_StreamStepServer interface {
	Send(*StepEnvironmentResponse) error
	Recv() (*StepEnvironmentRequest, error)
	grpc.ServerStream
}

type simulationServiceStreamStepServer struct {
	grpc.ServerStream
}

func (x *simulationServiceStreamStepServer) Send(m *StepEnvironmentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simulationServiceStreamStepServer) Recv() (*StepEnvironmentRequest, error) {
	m := new(StepEnvironmentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimulationService_ServiceDesc is the grpc.ServiceDesc for SimulationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimulationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simulation.SimulationService",
	HandlerType: (*SimulationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _SimulationService_GetInfo_Handler,
		},
		{
			MethodName: "CreateEnvironment",
			Handler:    _SimulationService_CreateEnvironment_Handler,
		},
		{
			MethodName: "ResetEnvironment",
			Handler:    _SimulationService_ResetEnvironment_Handler,
		},
		{
			MethodName: "StepEnvironment",
			Handler:    _SimulationService_StepEnvironment_Handler,
		},
		{
			MethodName: "CloseEnvironment",
			Handler:    _SimulationService_CloseEnvironment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStep",
			Handler:       _SimulationService_StreamStep_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/simulation.proto",
}
